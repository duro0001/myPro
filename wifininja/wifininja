#!/usr/bin/env python3
import subprocess
import re
import time
import csv
import sys
import threading
import socket
import zipfile
import os
import json
from termcolor import colored
from datetime import datetime
import netifaces
from scapy.all import ARP, Ether, srp

def startup_animation():
    """Display a professional startup animation"""
    logo = [
        "  ╔════════════════════════════════════╗",
        "  ║       WiFiNinja v1.1               ║",
        "  ║ Network Reconnaissance Tool        ║",
        "  ║                                    ║",
        "  ╚════════════════════════════════════╝"
    ]
    print("\n")
    for line in logo:
        print(colored(line, "green"))
        time.sleep(0.05)
    print(colored("Initializing network reconnaissance", "green"))
    time.sleep(0.5)
    print()

def loading_animation(stop_event):
    """Professional scanning animation with progress bar"""
    bar_length = 20
    while not stop_event.is_set():
        for i in range(bar_length + 1):
            if stop_event.is_set():
                break
            progress = "█" * i + " " * (bar_length - i)
            sys.stdout.write(colored(f"\rScanning: [{progress}]", "green"))
            sys.stdout.flush()
            time.sleep(0.1)
    sys.stdout.write('\r' + ' ' * 50 + '\r')
    sys.stdout.flush()

def result_animation():
    """Professional result display animation"""
    print(colored("\nProcessing results", "green"), end="")
    for _ in range(3):
        sys.stdout.write(colored(".", "green"))
        sys.stdout.flush()
        time.sleep(0.2)
    print("\n")

def get_network_info():
    """Get local network interface and IP range"""
    try:
        interfaces = netifaces.interfaces()
        for iface in interfaces:
            if iface != 'lo':
                addrs = netifaces.ifaddresses(iface)
                if netifaces.AF_INET in addrs:
                    ip_info = addrs[netifaces.AF_INET][0]
                    return ip_info['addr'], ip_info['netmask'], iface
        return None, None, None
    except Exception as e:
        print(colored(f"Error: Unable to detect network interface: {str(e)}", "red"))
        return None, None, None

def get_subnet(ip, netmask):
    """Calculate subnet from IP and netmask"""
    try:
        ip_parts = [int(part) for part in ip.split('.')]
        mask_parts = [int(part) for part in netmask.split('.')]
        network = [ip_parts[i] & mask_parts[i] for i in range(4)]
        broadcast = [(ip_parts[i] | ~mask_parts[i] & 255) for i in range(4)]
        start = network[:3] + [network[3] + 1]
        end = broadcast[:3] + [broadcast[3] - 1]
        mask_bits = sum(bin(m).count('1') for m in mask_parts)
        subnet = f"{'.'.join(map(str, network))}/{mask_bits}"
        return subnet, '.'.join(map(str, start)), '.'.join(map(str, end))
    except Exception as e:
        print(colored(f"Error: Unable to calculate subnet: {str(e)}", "red"))
        return None, None, None

def get_hostname(ip):
    """Get hostname based on IP address"""
    try:
        hostname, _, _ = socket.gethostbyaddr(ip)
        return hostname
    except:
        return "Unknown"

def scan_network(subnet, iface):
    """Scan network using scapy for ARP requests"""
    try:
        arp = ARP(pdst=subnet)
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = ether/arp
        result = srp(packet, timeout=2, iface=iface, verbose=0)[0]
        devices = []
        for sent, received in result:
            ip = received.psrc
            mac = received.hwsrc
            hostname = get_hostname(ip)
            devices.append((ip, mac, hostname))
        return devices
    except Exception as e:
        print(colored(f"Error: Network scan failed (sudo may be required): {str(e)}", "red"))
        return []

def get_device_type(mac):
    """Guess device type based on MAC address"""
    oui_prefix = mac[:8].lower()
    oui_database = {
        "00:18:f3": "Smartphone (Samsung)",
        "00:50:56": "Computer/Laptop (VMware)",
        "00:1a:11": "Router (TP-Link)",
        "00:14:22": "Smartphone (Apple)",
        "00:16:17": "Laptop (Dell)",
        "00:21:5a": "Laptop (Lenovo)",
        "00:24:d7": "Laptop (HP)",
        "00:0c:29": "Virtual Machine",
        "b8:27:eb": "R raspberry Pi",
        "00:1e:c2": "Smart TV (LG)",
        "00:26:bb": "Smartphone (Motorola)",
        "00:1c:bf": "Printer (HP)",
        "00:15:5d": "Server (Microsoft)",
        "00:90:fb": "Laptop (ASUS)",
        "00:22:5f": "Laptop (Acer)",
        "00:1e:68": "Laptop (MSI)",
        "00:18:8b": "Laptop (Toshiba)",
        "00:16:36": "Laptop (Sony)",
        "00:1c:7e": "Laptop (Razer)",
        "00:25:00": "IoT Device (Amazon)",
        "00:17:88": "Smart Camera (Nest)",
        "00:24:b2": "Smart Home (Philips Hue)"
    }
    return oui_database.get(oui_prefix, "Unknown device")

def save_results(devices, output_format="csv"):
    """Save results to CSV or JSON and compress to ZIP"""
    try:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"wifininja_scan_{timestamp}.{output_format}"
        
        if output_format == "csv":
            with open(filename, 'w', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["IP Address", "MAC Address", "Hostname", "Device Type", "Connection Time", "Disconnection Time"])
                for ip, mac, hostname, device_type, connect_time, disconnect_time in devices:
                    writer.writerow([ip, mac, hostname, device_type, connect_time, disconnect_time or "Still connected"])
        elif output_format == "json":
            data = [
                {
                    "ip": ip,
                    "mac": mac,
                    "hostname": hostname,
                    "device_type": device_type,
                    "connect_time": connect_time,
                    "disconnect_time": disconnect_time or "Still connected"
                } for ip, mac, hostname, device_type, connect_time, disconnect_time in devices
            ]
            with open(filename, 'w') as jsonfile:
                json.dump(data, jsonfile, indent=4)
        
        # Create ZIP archive
        zip_filename = f"wifininja_scan_{timestamp}.zip"
        with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
            zipf.write(filename)
        os.remove(filename)  # Remove original file
        print(colored(f"\nResults saved to {zip_filename}.", "green"))
    except PermissionError:
        print(colored("Error: Insufficient permissions to write file. Ensure sudo is used or check directory permissions.", "red"))
    except Exception as e:
        print(colored(f"Error: Failed to save results: {str(e)}", "red"))

def print_results_table(devices):
    """Display results in a formatted table"""
    result_animation()
    print(colored("\n=== WiFiNinja Scan Results ===", "green"))
    if devices:
        print(colored(f"{'IP Address':<16} {'MAC Address':<18} {'Hostname':<25} {'Device Type':<20} {'Connection Time':<20} {'Disconnection Time':<20}", "cyan"))
        print(colored("-" * 130, "cyan"))
        for ip, mac, hostname, device_type, connect_time, disconnect_time in devices:
            print(colored(f"{ip:<16} {mac:<18} {hostname:<25} {device_type:<20} {connect_time:<20} {disconnect_time or 'Still connected':<20}", "green"))
    else:
        print(colored("No devices detected on the network.", "yellow"))

def display_menu():
    """Display professional command interface"""
    print(colored("\n=== WiFiNinja Command Interface ===", "green"))
    print(colored("1. Start network scan", "cyan"))
    print(colored("2. Export results as CSV", "cyan"))
    print(colored("3. Export results as JSON", "cyan"))
    print(colored("4. Exit", "cyan"))
    return input(colored("Select option [1-4]: ", "green"))

def track_devices(last_results):
    """Continuously track devices"""
    ip, netmask, iface = get_network_info()
    if not ip or not netmask or not iface:
        print(colored("Error: Network interface not found. Ensure network connection is active.", "red"))
        sys.exit(1)

    subnet, start_ip, end_ip = get_subnet(ip, netmask)
    if not subnet:
        print(colored("Error: Unable to determine subnet.", "red"))
        sys.exit(1)

    print(colored(f"Local IP: {ip}, Interface: {iface}, Mask: {netmask}", "cyan"))
    print(colored(f"Scanning subnet: {start_ip} - {end_ip}", "cyan"))

    devices = {}
    stop_event = threading.Event()
    anim_thread = threading.Thread(target=loading_animation, args=(stop_event,))
    anim_thread.start()

    try:
        print(colored("\nNetwork scan initiated (press Ctrl+C to stop)...", "yellow"))
        while not stop_event.is_set():
            current_devices = scan_network(subnet, iface)
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # Detect new devices
            for ip, mac, hostname in current_devices:
                if (ip, mac) not in devices:
                    devices[(ip, mac)] = {
                        "connect_time": current_time,
                        "disconnect_time": None,
                        "device_type": get_device_type(mac),
                        "hostname": hostname
                    }
                    print(colored(f"Device detected: {ip} ({hostname}) - {devices[(ip, mac)]['device_type']}", "green"))
            
            # Detect disconnected devices
            for key in list(devices.keys()):
                if key not in [(ip, mac) for ip, mac, _ in current_devices] and not devices[key]["disconnect_time"]:
                    devices[key]["disconnect_time"] = current_time
            
            time.sleep(2)  # Fast scan interval

    except KeyboardInterrupt:
        stop_event.set()
        anim_thread.join()
    except Exception as e:
        stop_event.set()
        anim_thread.join()
        print(colored(f"Error during scan: {str(e)}", "red"))

    # Prepare and store results
    results = [(ip, mac, data["hostname"], data["device_type"], data["connect_time"], data["disconnect_time"])
               for (ip, mac), data in devices.items()]
    last_results.clear()
    last_results.extend(results)
    print_results_table(results)
    return results

def main():
    """Main function with command interface"""
    startup_animation()
    last_results = []

    # Check for sudo
    if os.geteuid() != 0:
        print(colored("Error: This tool requires root privileges for network operations.", "red"))
        print(colored("Run with: sudo ./wifininja.py", "yellow"))
        sys.exit(1)

    while True:
        choice = display_menu()
        if choice == "1":
            results = track_devices(last_results)
        elif choice == "2":
            if last_results:
                save_results(last_results, output_format="csv")
            else:
                print(colored("No results available. Run a scan first.", "yellow"))
        elif choice == "3":
            if last_results:
                save_results(last_results, output_format="json")
            else:
                print(colored("No results available. Run a scan first.", "yellow"))
        elif choice == "4":
            print(colored("\nWiFiNinja terminated successfully.", "green"))
            sys.exit(0)
        else:
            print(colored("Invalid option. Please select 1, 2, 3, or 4.", "red"))

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(colored("\nScan interrupted. Exiting...", "red"))
        sys.exit(0)
    except Exception as e:
        print(colored(f"Critical error: {str(e)}", "red"))
        sys.exit(1)
