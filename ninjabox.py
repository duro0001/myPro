import subprocess
import platform
import re
import os
import random
import time
from datetime import datetime
from colorama import Fore, Style, init
import pyfiglet
import psutil
import requests
import speedtest
from cryptography.fernet import Fernet
import wmi

# ========== Initialize Libraries ==========
init(autoreset=True)
c = wmi.WMI()

# ========== Quotes ==========
quotes = [
    "üîê Security is not a product, but a process.",
    "üíª Code is like a ninja ‚Äì fast, silent, and precise.",
    "üß† Hack the planet, protect your data.",
    "üéØ Tools don't hack, people do.",
    "üï∂Ô∏è Every byte matters in cyber space.",
    "üöÄ First, solve the problem. Then, write the code.",
    "üß¨ Simplicity is the ultimate sophistication.",
    "üî• You don‚Äôt need eyes to see, you need vision.",
    "üì° Data is the new oil ‚Äì protect it.",
    "üí° Innovation is born from necessity.",
    "üîç Bugs are just undocumented features.",
    "‚öôÔ∏è Keep calm and grep on.",
    "üîì The best password is the one you can't remember.",
    "‚ò†Ô∏è Hackers don‚Äôt break in ‚Äì they walk through open doors.",
    "üîÅ Rebooting is like sweeping your room under the rug.",
    "üìä Trust, but verify ‚Äì even your system logs.",
    "üîÑ There's no patch for human stupidity.",
    "üß© Don't code harder, code smarter.",
    "üõ°Ô∏è Encryption: Because privacy matters.",
    "üëÄ Real hackers wear hoodies and drink coffee.",
    "üìÅ Life is too short to manually sort files.",
    "üí£ Delete system32 to boost FPS. (Just kidding!)",
    "üîß If it works, don‚Äôt touch it.",
    "üåÄ There‚Äôs always one more bug.",
    "‚è±Ô∏è Compile time is thinking time.",
    "üìå Document your code or face your own wrath.",
    "üóÇÔ∏è Backups are proof you once cared.",
    "üìâ Downtime is not an option. Unless you're sleeping.",
    "üõ†Ô∏è Coding: where hours of fun = minutes of running code.",
    "üßØ Try except finally: Try not to panic.",
    "üë®‚Äçüíª Eat, Sleep, Code, Repeat.",
    "üìé Your favorite function is now deprecated.",
    "üîã Battery low... like your motivation.",
    "üíª A clean desk = a wiped hard drive.",
    "üßÆ RAM is just a suggestion for Chrome.",
    "üöß Under construction... like every good idea.",
    "üåê DNS ‚Äì the phonebook of the internet.",
    "üß† AI can‚Äôt fix human error (yet).",
    "üíæ Save early, save often.",
    "üêç Python: Where whitespace is law.",
    "üëæ Coding is debugging a bug you introduced while fixing a bug.",
    "üì¶ Install package, break system. Fix system, uninstall package.",
    "üõ∏ Tech support: Have you tried turning it off and on again?",
    "üîç Who needs sleep when you have logs to tail?",
    "‚òï Coffee > Sleep when code is compiling.",
    "üé≤ 50% of programming is Google. The other 50% is Stack Overflow.",
    "‚ö° Your firewall is only as strong as your last update.",
    "üßü‚Äç‚ôÇÔ∏è Zombie processes are real. Run `htop` and see.",
    "üì° Wi-Fi drops during online exams. Coincidence? I think not.",
    "üßô‚Äç‚ôÇÔ∏è Code is poetry. Until it throws an exception."
]

# ========== Banner ==========
def animated_banner():
    os.system('cls' if os.name == 'nt' else 'clear')
    banner = pyfiglet.figlet_format("NinjaBox")
    for char in banner:
        print(Fore.GREEN + char, end='', flush=True)
        time.sleep(0.0005)
    print(Fore.RED + "=" * 60)
    print(Fore.CYAN + f"üìÖ {datetime.now().strftime('%Y-%m-%d')}     üïí {datetime.now().strftime('%H:%M:%S')}")
    print(Fore.YELLOW + random.choice(quotes))
    print(Fore.RED + "=" * 60 + "\n")

# ========== 1. View saved Wi-Fi passwords ==========
def wifi_passwords():
    print(Fore.CYAN + "\n[+] Saved Wi-Fi networks:")
    result = subprocess.run(["netsh", "wlan", "show", "profiles"], capture_output=True, text=True)
    profiles = re.findall(r"All User Profile\s*: (.*)", result.stdout)
    for profile in profiles:
        profile = profile.strip()
        result2 = subprocess.run(["netsh", "wlan", "show", "profile", profile, "key=clear"], capture_output=True, text=True)
        password = re.search(r"Key Content\s*: (.*)", result2.stdout)
        print(Fore.YELLOW + f"üì∂ {profile} ‚Üí üîë {password.group(1) if password else 'Unknown'}")

# ========== 2. System Information ==========
def system_info():
    print(Fore.CYAN + "\n[+] Full system information:")
    print(Fore.YELLOW + f"OS: {platform.system()} {platform.release()}")
    print(Fore.YELLOW + f"Platform: {platform.platform()}")
    print(Fore.YELLOW + f"CPU: {platform.processor()}")
    for cpu in c.Win32_Processor():
        print(Fore.YELLOW + f"CPU Name: {cpu.Name.strip()}")
        print(Fore.YELLOW + f"Cores: {cpu.NumberOfCores}")
        print(Fore.YELLOW + f"Threads: {cpu.NumberOfLogicalProcessors}")
    print(Fore.YELLOW + f"RAM: {round(psutil.virtual_memory().total / (1024**3), 2)} GB")
    try:
        for gpu in c.Win32_VideoController():
            print(Fore.YELLOW + f"GPU: {gpu.Name.strip()} ({gpu.DriverVersion})")
    except:
        print(Fore.YELLOW + f"GPU: Not detected")
    print(Fore.YELLOW + "\n[üíΩ] Disk info:")
    for disk in psutil.disk_partitions():
        try:
            usage = psutil.disk_usage(disk.mountpoint)
            print(Fore.YELLOW + f"üìÅ {disk.device} ‚Üí {round(usage.total / (1024**3), 2)} GB total, {round(usage.free / (1024**3), 2)} GB free")
        except:
            pass
    print(Fore.YELLOW + "\n[üõ°Ô∏è] Antivirus Info:")
    try:
        for av in c.Win32_Product():
            if "antivirus" in av.Name.lower():
                print(Fore.YELLOW + f"üîí {av.Name}")
    except:
        print(Fore.YELLOW + "Antivirus not found or data unavailable")
    print(Fore.YELLOW + "\n[üåê] Network IP addresses:")
    addrs = psutil.net_if_addrs()
    for iface, infos in addrs.items():
        for info in infos:
            if info.family.name == 'AF_INET':
                print(Fore.YELLOW + f"üåê {iface}: {info.address}")

# ========== 3. IP Info & Internet Speed ==========
def ip_info():
    print(Fore.CYAN + "\n[+] IP Address and Location:")
    try:
        res = requests.get("https://ipinfo.io/json").json()
        print(Fore.YELLOW + f"IP: {res.get('ip')}")
        print(Fore.YELLOW + f"City: {res.get('city')}, {res.get('region')}, {res.get('country')}")
        print(Fore.YELLOW + f"ISP: {res.get('org')}")
    except:
        print(Fore.RED + "[!] Failed to retrieve IP info")

def internet_speed():
    print(Fore.CYAN + "\n[+] Internet Speed:")
    st = speedtest.Speedtest()
    download = st.download() / 1024 / 1024
    upload = st.upload() / 1024 / 1024
    print(Fore.YELLOW + f"‚¨áÔ∏è Download: {download:.2f} Mbps")
    print(Fore.YELLOW + f"‚¨ÜÔ∏è Upload: {upload:.2f} Mbps")

# ========== 4. Joke & Motivation ==========
def show_joke():
    print(Fore.CYAN + "\n[üòÑ] Random Joke:")
    print(Fore.YELLOW + random.choice(quotes))

def show_motivation():
    print(Fore.CYAN + "\n[üî•] Today's Motivation:")
    print(Fore.YELLOW + random.choice(quotes))

# ========== 5. File Encryption / Decryption ==========
def file_encryptor():
    print(Fore.CYAN + "\n[üîê] File Encryption")
    filename = input("Enter file name: ")
    if not os.path.exists(filename):
        print(Fore.RED + "[!] File not found!")
        return
    key = Fernet.generate_key()
    f = Fernet(key)
    with open(filename, 'rb') as file:
        original = file.read()
    encrypted = f.encrypt(original)
    with open(filename + ".enc", 'wb') as enc_file:
        enc_file.write(encrypted)
    with open("key.key", 'wb') as key_file:
        key_file.write(key)
    print(Fore.GREEN + f"[+] {filename}.enc created. Key saved to key.key")

def file_decryptor():
    print(Fore.CYAN + "\n[üîì] File Decryption")
    enc_filename = input("Enter encrypted file name (.enc): ")
    if not os.path.exists(enc_filename):
        print(Fore.RED + "[!] File not found!")
        return
    if not os.path.exists("key.key"):
        print(Fore.RED + "[!] Key file (key.key) not found!")
        return
    with open("key.key", 'rb') as key_file:
        key = key_file.read()
    f = Fernet(key)
    with open(enc_filename, 'rb') as enc_file:
        encrypted = enc_file.read()
    try:
        decrypted = f.decrypt(encrypted)
        original_filename = enc_filename.replace(".enc", ".decrypted")
        with open(original_filename, 'wb') as dec_file:
            dec_file.write(decrypted)
        print(Fore.GREEN + f"[+] {original_filename} created.")
    except:
        print(Fore.RED + "[!] Error occurred during decryption!")

# ========== Menu ==========
def main():
    while True:
        animated_banner()
        print(Fore.CYAN + "1Ô∏è‚É£  View Wi-Fi Passwords")
        print("2Ô∏è‚É£  System Information")
        print("3Ô∏è‚É£  IP & Internet Speed")
        print("4Ô∏è‚É£  Random Joke")
        print("5Ô∏è‚É£  Motivation")
        print("6Ô∏è‚É£  Encrypt a File")
        print("7Ô∏è‚É£  Decrypt a File")
        print("8Ô∏è‚É£  Exit")
        choice = input(Fore.GREEN + "\nYour choice (1‚Äì8): ")

        if choice == '1':
            wifi_passwords()
        elif choice == '2':
            system_info()
        elif choice == '3':
            ip_info()
            internet_speed()
        elif choice == '4':
            show_joke()
        elif choice == '5':
            show_motivation()
        elif choice == '6':
            file_encryptor()
        elif choice == '7':
            file_decryptor()
        elif choice == '8':
            print(Fore.CYAN + "\n[üëã] Thank you for using NinjaBox!")
            break
        else:
            print(Fore.RED + "[!] Invalid choice. Please enter between 1‚Äì8.")

        input(Fore.BLUE + "\n‚èé Press Enter to continue...")

if __name__ == "__main__":
    main()
